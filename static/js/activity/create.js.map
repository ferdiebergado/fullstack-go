{
  "version": 3,
  "sources": ["../../../assets/js/config.js", "../../../assets/js/components/notification.js", "../../../assets/js/form.js", "../../../assets/js/components/dialog.js", "../../../assets/js/components/select.js", "../../../assets/js/host.js", "../../../assets/js/venue.js", "../../../assets/js/activity/create.js"],
  "sourcesContent": ["// @ts-check\nconst inputErrorClass = 'has-error';\nconst successBgClass = 'alert-success';\nconst errorBgClass = 'alert-error';\nconst errorTextClass = 'form-error';\n\nexport { inputErrorClass, successBgClass, errorBgClass, errorTextClass };\n", "// @ts-check\nimport { errorBgClass, successBgClass } from '../config.js';\n\n/**\n * Displays a notification on success or error.\n * @param {string} message\n * @param {string} type\n */\nexport function showNotification(message, type) {\n  const notification = document.getElementById('notification');\n  const header = document.getElementById('notification-header');\n  const body = document.getElementById('notification-message');\n\n  if (notification && header && body) {\n    if (type === 'success') {\n      header.textContent = 'Action Completed';\n      notification.classList.remove(errorBgClass);\n      notification.classList.add(successBgClass);\n    } else {\n      header.textContent = 'Action Failed';\n      notification.classList.remove(successBgClass);\n      notification.classList.add(errorBgClass);\n    }\n\n    body.textContent = message;\n    notification.style.display = 'block';\n  }\n}\n", "// @ts-check\nimport { inputErrorClass } from './config.js';\nimport { showNotification } from './components/notification.js';\n\n/**\n * Sends a request and handles form submission.\n * @param {HTMLFormElement} form\n * @param {Function} cb\n */\nexport async function submitForm(form, cb) {\n  clearFormErrors(form);\n\n  const formData = new FormData(form);\n  const actionUrl = form.getAttribute('action');\n\n  /** @type {HTMLInputElement|null} */\n  const methodInput = form.querySelector('input[name=\"_method\"]');\n\n  let method = 'POST';\n\n  if (methodInput) method = methodInput.value.toUpperCase();\n\n  // Convert FormData to a plain object\n  const payload = {};\n\n  formData.forEach((value, key) => {\n    // Convert numeric fields manually\n    if (key.endsWith('_id')) {\n      payload[key] = Number(value); // Convert to number\n    } else {\n      payload[key] = value; // Keep as string\n    }\n  });\n\n  try {\n    const response = await fetch(actionUrl, {\n      method,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload),\n    });\n\n    /** @type {import('./typedefs').ApiResponse} */\n    const { errors, message, data } = await response.json();\n\n    if (!response.ok) {\n      if (errors) displayFormErrors(form, errors);\n\n      showNotification(message, 'error');\n    } else {\n      showNotification(message, 'success');\n\n      if (method !== 'PUT') form.reset();\n      cb(data);\n    }\n  } catch (error) {\n    showNotification('An error occurred. Please try again.', 'error');\n  }\n}\n\n/**\n *\n * @param {HTMLFormElement} form\n * @param {import(\"./typedefs\").ValidationError[]} errors\n */\nfunction displayFormErrors(form, errors) {\n  errors.forEach(({ field, error }) => {\n    const input = form.querySelector(`[name=\"${field}\"]`);\n    if (input) {\n      const helpText = input.nextElementSibling;\n      input.classList.add(inputErrorClass);\n      if (helpText) helpText.textContent = error;\n    }\n  });\n}\n\n/**\n * Removes the error styles from the form inputs.\n * @param {HTMLFormElement} form\n */\nfunction clearFormErrors(form) {\n  form.querySelectorAll('.' + inputErrorClass).forEach((input) => {\n    input.classList.remove(inputErrorClass);\n    const nextEl = input.nextElementSibling;\n    if (nextEl) nextEl.textContent = '';\n  });\n}\n", "// @ts-check\n/**\n * Mounts a dialog for select elements.\n * @param {string} dialogId\n * @param {HTMLSelectElement} select\n */\nexport function mountDialogForSelect(dialogId, select) {\n  /** @type {HTMLDialogElement} */\n  const dialog = document.getElementById(dialogId);\n  const dialogClose = dialog.querySelector('#dialog-close');\n\n  dialogClose?.addEventListener('click', () => dialog?.close());\n  window.addEventListener('click', (event) => {\n    if (event.target === dialog) dialog.close();\n  });\n\n  select?.addEventListener('change', showDialog);\n  select?.addEventListener('click', showDialog);\n\n  function showDialog() {\n    const optionValue = select.options[select.selectedIndex].value;\n    if (optionValue === 'add') {\n      dialog?.showModal();\n    }\n  }\n\n  return dialog;\n}\n", "// @ts-check\n/**\n * Updates the select element with new options.\n * @param {HTMLSelectElement} select\n * @param {Object} detail\n */\nexport function updateSelect(select, detail) {\n  const options = Array.from(select.options).slice(1);\n\n  const newOption = document.createElement('option');\n  newOption.value = detail.id.toString();\n  newOption.text = detail.name;\n  newOption.selected = true;\n  options.push(newOption);\n  options.sort((a, b) => a.text.localeCompare(b.text));\n\n  const firstOption = select.options[0];\n  select.innerHTML = '';\n  select.add(firstOption);\n  options.forEach((option) => select.add(option));\n}\n", "// @ts-check\n\nimport { mountDialogForSelect } from './components/dialog.js';\nimport { updateSelect } from './components/select.js';\nimport { submitForm } from './form.js';\n\n/** @type {HTMLFormElement} */\nconst createHostForm = document.getElementById('create-host-form');\n\n/** @type {HTMLSelectElement} */\nconst hostSelect = document.getElementById('host_id');\n\nconst hostDialog = mountDialogForSelect('create-host-dialog', hostSelect);\n\nexport function watchHost() {\n  hostSelect?.addEventListener(\n    'HostCreated',\n    /** @param {import('./typedefs.js').MyCustomEventInit} event */\n    function (event) {\n      updateSelect(this, event.detail);\n    }\n  );\n}\n\nexport function handleHostForm() {\n  createHostForm?.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    submitForm(this, (data) => {\n      hostSelect?.dispatchEvent(\n        new CustomEvent('HostCreated', { detail: data })\n      );\n      hostDialog.close();\n    });\n  });\n}\n", "// @ts-check\n\nimport { mountDialogForSelect } from './components/dialog.js';\nimport { submitForm } from './form.js';\nimport { updateSelect } from './components/select.js';\n\n/** @type {HTMLFormElement} */\nconst createVenueForm = document.getElementById('create-venue-form');\n\n/** @type {HTMLSelectElement} */\nconst venueSelect = document.getElementById('venue_id');\n\nexport function handleVenueForm() {\n  createVenueForm?.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    submitForm(this, (data) => {\n      venueSelect?.dispatchEvent(\n        new CustomEvent('VenueCreated', { detail: data })\n      );\n      venueDialog.close();\n    });\n  });\n}\n\nconst venueDialog = mountDialogForSelect('create-venue-dialog', venueSelect);\n\nexport function watchVenue() {\n  venueSelect?.addEventListener(\n    'VenueCreated',\n    /** @param {import('./typedefs.js').MyCustomEventInit} event */ function (\n      event\n    ) {\n      updateSelect(this, event.detail);\n    }\n  );\n}\n", "// @ts-check\n\nimport { submitForm } from '../form.js';\nimport { handleHostForm, watchHost } from '../host.js';\nimport { handleVenueForm, watchVenue } from '../venue.js';\n\n/** @type {HTMLFormElement} */\nconst createActivityForm = document.getElementById('create-activity-form');\n\ncreateActivityForm?.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  submitForm(this, () => {});\n});\n\nhandleVenueForm();\nhandleHostForm();\nwatchVenue();\nwatchHost();\n"],
  "mappings": "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",
  "names": ["inputErrorClass", "successBgClass", "errorBgClass", "showNotification", "message", "type", "notification", "header", "body", "errorBgClass", "successBgClass", "submitForm", "form", "cb", "__async", "clearFormErrors", "formData", "actionUrl", "methodInput", "method", "payload", "value", "key", "response", "errors", "message", "data", "showNotification", "displayFormErrors", "error", "field", "input", "helpText", "inputErrorClass", "nextEl", "mountDialogForSelect", "dialogId", "select", "dialog", "dialogClose", "event", "showDialog", "updateSelect", "select", "detail", "options", "newOption", "a", "b", "firstOption", "option", "createHostForm", "hostSelect", "hostDialog", "mountDialogForSelect", "watchHost", "event", "updateSelect", "handleHostForm", "submitForm", "data", "createVenueForm", "venueSelect", "handleVenueForm", "event", "submitForm", "data", "venueDialog", "mountDialogForSelect", "watchVenue", "updateSelect", "createActivityForm", "event", "submitForm", "handleVenueForm", "handleHostForm", "watchVenue", "watchHost"]
}
