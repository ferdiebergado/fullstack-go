{
  "version": 3,
  "sources": ["../../../assets/js/components/pager.js"],
  "sourcesContent": ["// @ts-check\nimport { showNotification } from './notification.js';\n\n/** @type {HTMLInputElement} */\nconst currentPageInput = document.getElementById('currentPage');\nconst refreshButton = document.getElementById('refresh');\nconst totalPagesSpan = document.getElementById('totalPages');\n/** @type {HTMLSelectElement} */\nconst recordsPerPageSelect = document.getElementById('recordsPerPage');\nconst currentRecordsSpan = document.getElementById('currentRecords');\nconst totalRecordsSpan = document.getElementById('totalRecords');\nconst tableBody = document.querySelector('#datatable tbody');\n\nlet currentPage = parseInt(currentPageInput?.value) || 1;\nlet totalPages = 1;\nlet recordsPerPage = parseInt(recordsPerPageSelect?.value);\nlet totalRecords = 0;\n\nasync function fetchData() {\n  try {\n    const response = await fetch(\n      `/api/activities?page=${currentPage}&limit=${recordsPerPage}`,\n      {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n      }\n    );\n\n    const { message, data } = await response.json();\n\n    if (!response.ok) {\n      showNotification(message, 'error');\n    } else {\n      totalRecords = data.total_items;\n      totalPages = Math.ceil(totalRecords / recordsPerPage);\n      renderData(data.data);\n      updatePagination();\n    }\n  } catch {\n    showNotification('An error occurred. Please try again.', 'error');\n  }\n}\n\n/**\n * Renders the table data.\n * @param {Object} data\n */\nfunction renderData(data) {\n  if (tableBody) {\n    tableBody.innerHTML = '';\n\n    const fragment = document.createDocumentFragment();\n\n    data.forEach((d) => {\n      /** @type {HTMLTemplateElement} */\n      const template = document\n        .getElementById('activity-row')\n        ?.content.cloneNode(true);\n      if (template) {\n        template.querySelector('.title').textContent = d.title;\n        template.querySelector('.title')?.setAttribute('title', d.title);\n        template.querySelector('.start_date').textContent = d.start_date;\n        template.querySelector('.end_date').textContent = d.end_date;\n        template.querySelector('.venue').textContent = d.venue;\n        template.querySelector('.venue')?.setAttribute('title', d.venue);\n        template.querySelector('.region').textContent = d.region;\n        template.querySelector('.host').textContent = d.host;\n        template.querySelector('.host')?.setAttribute('title', d.host);\n        template.querySelector('.info').href = `/activities/${d.id}`;\n        template.querySelector('.view').href = `/activities/${d.id}/edit`;\n\n        fragment.appendChild(template);\n      }\n    });\n\n    tableBody.appendChild(fragment);\n  }\n}\n\nfunction updatePagination() {\n  currentPageInput.value = currentPage;\n  totalPagesSpan.textContent = totalPages;\n  currentRecordsSpan.textContent = (currentPage - 1) * recordsPerPage + 1;\n  totalRecordsSpan.textContent = totalRecords;\n}\n\nasync function changePage(newPage) {\n  if (newPage >= 1 && newPage <= totalPages) {\n    currentPage = newPage;\n    await fetchData();\n  }\n}\n\ndocument\n  .getElementById('firstPage')\n  ?.addEventListener('click', async () => await changePage(1));\ndocument\n  .getElementById('prevPage')\n  ?.addEventListener('click', async () => await changePage(currentPage - 1));\ndocument\n  .getElementById('nextPage')\n  ?.addEventListener('click', async () => await changePage(currentPage + 1));\ndocument\n  .getElementById('lastPage')\n  ?.addEventListener('click', async () => await changePage(totalPages));\n\nrefreshButton?.addEventListener('click', async () => {\n  await fetchData();\n});\n\ncurrentPageInput?.addEventListener('change', async () => {\n  const newPage = parseInt(currentPageInput?.value);\n  await changePage(newPage);\n});\n\nrecordsPerPageSelect.addEventListener('change', async () => {\n  recordsPerPage = parseInt(recordsPerPageSelect.value);\n  currentPage = 1;\n  await fetchData();\n});\n\n// Initial fetch\nfetchData().catch((err) => console.log(err));\n"],
  "mappings": "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",
  "names": ["require_pager", "__commonJSMin", "exports", "init_notification", "currentPageInput", "refreshButton", "totalPagesSpan", "recordsPerPageSelect", "currentRecordsSpan", "totalRecordsSpan", "tableBody", "currentPage", "totalPages", "recordsPerPage", "totalRecords", "fetchData", "__async", "response", "message", "data", "renderData", "updatePagination", "showNotification", "e", "fragment", "d", "_a", "_b", "_c", "_d", "template", "changePage", "newPage", "err"]
}
