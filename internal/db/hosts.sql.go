// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hosts.sql

package db

import (
	"context"
)

const createHost = `-- name: CreateHost :one
INSERT INTO hosts (name) VALUES ($1) RETURNING id, name, metadata, created_at, updated_at, deleted_at
`

func (q *Queries) CreateHost(ctx context.Context, name string) (Host, error) {
	row := q.db.QueryRowContext(ctx, createHost, name)
	var i Host
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteHost = `-- name: DeleteHost :exec
UPDATE hosts SET deleted_at = now() WHERE id = $1
`

func (q *Queries) DeleteHost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHost, id)
	return err
}

const findHost = `-- name: FindHost :one
SELECT id, name, metadata, created_at, updated_at, deleted_at FROM hosts WHERE id = $1
`

func (q *Queries) FindHost(ctx context.Context, id int64) (Host, error) {
	row := q.db.QueryRowContext(ctx, findHost, id)
	var i Host
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findHostsByName = `-- name: FindHostsByName :many
SELECT id, name, metadata, created_at, updated_at, deleted_at FROM hosts WHERE name LIKE '%$1%'
`

func (q *Queries) FindHostsByName(ctx context.Context) ([]Host, error) {
	rows, err := q.db.QueryContext(ctx, findHostsByName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Host
	for rows.Next() {
		var i Host
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHosts = `-- name: GetHosts :many
SELECT id, name, metadata, created_at, updated_at, deleted_at FROM hosts ORDER BY name
`

func (q *Queries) GetHosts(ctx context.Context) ([]Host, error) {
	rows, err := q.db.QueryContext(ctx, getHosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Host
	for rows.Next() {
		var i Host
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHost = `-- name: UpdateHost :exec
UPDATE hosts SET name = $1 WHERE id = $2
`

type UpdateHostParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateHost(ctx context.Context, arg UpdateHostParams) error {
	_, err := q.db.ExecContext(ctx, updateHost, arg.Name, arg.ID)
	return err
}
