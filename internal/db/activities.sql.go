// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: activities.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO
    activities (
        title,
        start_date,
        end_date,
        venue_id,
        host_id,
        metadata
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, title, start_date, end_date, venue_id, host_id, metadata, created_at, updated_at, deleted_at
`

type CreateActivityParams struct {
	Title     string          `json:"title"`
	StartDate Date            `json:"start_date"`
	EndDate   Date            `json:"end_date"`
	VenueID   int32           `json:"venue_id"`
	HostID    int32           `json:"host_id"`
	Metadata  json.RawMessage `json:"metadata"`
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.Title,
		arg.StartDate,
		arg.EndDate,
		arg.VenueID,
		arg.HostID,
		arg.Metadata,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.VenueID,
		&i.HostID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteActivity = `-- name: DeleteActivity :exec
UPDATE active_activities SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteActivity, id)
	return err
}

const findActivity = `-- name: FindActivity :one
SELECT
    a.id, a.title, a.start_date, a.end_date, a.venue_id, a.host_id, a.metadata, a.created_at, a.updated_at, a.deleted_at,
    v.name as venue,
    r.id as region_id,
    r.name as region,
    h.name as host
FROM
    active_activities a
    JOIN venues v ON v.id = a.venue_id
    JOIN divisions d ON d.id = v.division_id
    JOIN regions r ON r.region_id = d.region_id
    JOIN hosts h on h.id = a.host_id
WHERE
    a.id = $1
`

type FindActivityRow struct {
	ID        int64           `json:"id"`
	Title     string          `json:"title"`
	StartDate Date            `json:"start_date"`
	EndDate   Date            `json:"end_date"`
	VenueID   int32           `json:"venue_id"`
	HostID    int32           `json:"host_id"`
	Metadata  json.RawMessage `json:"metadata"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
	DeletedAt sql.NullTime    `json:"deleted_at"`
	Venue     string          `json:"venue"`
	RegionID  int16           `json:"region_id"`
	Region    string          `json:"region"`
	Host      string          `json:"host"`
}

func (q *Queries) FindActivity(ctx context.Context, id int64) (FindActivityRow, error) {
	row := q.db.QueryRowContext(ctx, findActivity, id)
	var i FindActivityRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.VenueID,
		&i.HostID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Venue,
		&i.RegionID,
		&i.Region,
		&i.Host,
	)
	return i, err
}

const findActivityAll = `-- name: FindActivityAll :one
SELECT id, title, start_date, end_date, venue_id, host_id, metadata, created_at, updated_at, deleted_at FROM activities WHERE id = $1
`

func (q *Queries) FindActivityAll(ctx context.Context, id int64) (Activity, error) {
	row := q.db.QueryRowContext(ctx, findActivityAll, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.VenueID,
		&i.HostID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findActivityByStartDate = `-- name: FindActivityByStartDate :many
SELECT id, title, start_date, end_date, venue_id, host_id, metadata, created_at, updated_at, deleted_at FROM active_activities WHERE start_date = $1
`

func (q *Queries) FindActivityByStartDate(ctx context.Context, startDate Date) ([]ActiveActivity, error) {
	rows, err := q.db.QueryContext(ctx, findActivityByStartDate, startDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActiveActivity
	for rows.Next() {
		var i ActiveActivity
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartDate,
			&i.EndDate,
			&i.VenueID,
			&i.HostID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findActivityByTitle = `-- name: FindActivityByTitle :many
SELECT id, title, start_date, end_date, venue_id, host_id, metadata, created_at, updated_at, deleted_at FROM active_activities WHERE title LIKE '%$1%'
`

func (q *Queries) FindActivityByTitle(ctx context.Context) ([]ActiveActivity, error) {
	rows, err := q.db.QueryContext(ctx, findActivityByTitle)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActiveActivity
	for rows.Next() {
		var i ActiveActivity
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartDate,
			&i.EndDate,
			&i.VenueID,
			&i.HostID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivities = `-- name: ListActivities :many
SELECT a.id, a.title, a.start_date, a.end_date, a.venue_id, a.host_id, a.metadata, a.created_at, a.updated_at, a.deleted_at, v.name as venue, r.name as region, h.name as host
FROM
    active_activities a
    JOIN venues v ON v.id = a.venue_id
    JOIN divisions d ON d.id = v.division_id
    JOIN regions r ON r.region_id = d.region_id
    JOIN hosts h on h.id = a.host_id
ORDER BY start_date DESC
`

type ListActivitiesRow struct {
	ID        int64           `json:"id"`
	Title     string          `json:"title"`
	StartDate Date            `json:"start_date"`
	EndDate   Date            `json:"end_date"`
	VenueID   int32           `json:"venue_id"`
	HostID    int32           `json:"host_id"`
	Metadata  json.RawMessage `json:"metadata"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
	DeletedAt sql.NullTime    `json:"deleted_at"`
	Venue     string          `json:"venue"`
	Region    string          `json:"region"`
	Host      string          `json:"host"`
}

func (q *Queries) ListActivities(ctx context.Context) ([]ListActivitiesRow, error) {
	rows, err := q.db.QueryContext(ctx, listActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListActivitiesRow
	for rows.Next() {
		var i ListActivitiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartDate,
			&i.EndDate,
			&i.VenueID,
			&i.HostID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Venue,
			&i.Region,
			&i.Host,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllActivities = `-- name: ListAllActivities :many
SELECT id, title, start_date, end_date, venue_id, host_id, metadata, created_at, updated_at, deleted_at FROM activities ORDER BY start_date DESC
`

func (q *Queries) ListAllActivities(ctx context.Context) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listAllActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartDate,
			&i.EndDate,
			&i.VenueID,
			&i.HostID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreActivity = `-- name: RestoreActivity :exec
UPDATE activities SET deleted_at = NULL WHERE id = $1
`

func (q *Queries) RestoreActivity(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, restoreActivity, id)
	return err
}

const updateActivity = `-- name: UpdateActivity :exec
UPDATE activities
SET
    title = $1,
    start_date = $2,
    end_date = $3,
    venue_id = $4,
    host_id = $5,
    metadata = $6,
    updated_at = NOW()
WHERE
    id = $7
`

type UpdateActivityParams struct {
	Title     string          `json:"title"`
	StartDate Date            `json:"start_date"`
	EndDate   Date            `json:"end_date"`
	VenueID   int32           `json:"venue_id"`
	HostID    int32           `json:"host_id"`
	Metadata  json.RawMessage `json:"metadata"`
	ID        int64           `json:"id"`
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) error {
	_, err := q.db.ExecContext(ctx, updateActivity,
		arg.Title,
		arg.StartDate,
		arg.EndDate,
		arg.VenueID,
		arg.HostID,
		arg.Metadata,
		arg.ID,
	)
	return err
}
