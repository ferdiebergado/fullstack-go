// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: activities.sql

package db

import (
	"context"
	"encoding/json"
)

const countActiveActivities = `-- name: CountActiveActivities :one
SELECT COUNT(*) FROM active_activities
`

func (q *Queries) CountActiveActivities(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActiveActivities)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countActivities = `-- name: CountActivities :one
SELECT COUNT(*) FROM activities
`

func (q *Queries) CountActivities(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActivities)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createActivity = `-- name: CreateActivity :one
INSERT INTO
    activities (
        title,
        start_date,
        end_date,
        venue_id,
        host_id,
        metadata
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, title, start_date, end_date, venue_id, host_id, metadata, created_at, updated_at, deleted_at
`

type CreateActivityParams struct {
	Title     string          `json:"title"`
	StartDate Date            `json:"start_date"`
	EndDate   Date            `json:"end_date"`
	VenueID   int32           `json:"venue_id"`
	HostID    int32           `json:"host_id"`
	Metadata  json.RawMessage `json:"metadata"`
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.Title,
		arg.StartDate,
		arg.EndDate,
		arg.VenueID,
		arg.HostID,
		arg.Metadata,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.VenueID,
		&i.HostID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteActivity = `-- name: DeleteActivity :exec
UPDATE active_activities SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteActivity, id)
	return err
}

const findActiveActivity = `-- name: FindActiveActivity :one
SELECT id FROM active_activities WHERE id = $1
`

func (q *Queries) FindActiveActivity(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, findActiveActivity, id)
	err := row.Scan(&id)
	return id, err
}

const findActiveActivityDetails = `-- name: FindActiveActivityDetails :one
SELECT id, title, start_date, end_date, venue_id, host_id, metadata, created_at, updated_at, deleted_at, venue, region, host FROM active_activity_details WHERE id = $1
`

func (q *Queries) FindActiveActivityDetails(ctx context.Context, id int64) (ActiveActivityDetail, error) {
	row := q.db.QueryRowContext(ctx, findActiveActivityDetails, id)
	var i ActiveActivityDetail
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.VenueID,
		&i.HostID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Venue,
		&i.Region,
		&i.Host,
	)
	return i, err
}

const findActivity = `-- name: FindActivity :one
SELECT id, title, start_date, end_date, venue_id, host_id, metadata, created_at, updated_at, deleted_at FROM activities WHERE id = $1
`

func (q *Queries) FindActivity(ctx context.Context, id int64) (Activity, error) {
	row := q.db.QueryRowContext(ctx, findActivity, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.VenueID,
		&i.HostID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findActivityDetail = `-- name: FindActivityDetail :one
SELECT id, title, start_date, end_date, venue_id, host_id, metadata, created_at, updated_at, deleted_at, venue, region, host FROM activity_details WHERE id = $1
`

func (q *Queries) FindActivityDetail(ctx context.Context, id int64) (ActivityDetail, error) {
	row := q.db.QueryRowContext(ctx, findActivityDetail, id)
	var i ActivityDetail
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.VenueID,
		&i.HostID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Venue,
		&i.Region,
		&i.Host,
	)
	return i, err
}

const restoreActivity = `-- name: RestoreActivity :exec
UPDATE activities SET deleted_at = NULL WHERE id = $1
`

func (q *Queries) RestoreActivity(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, restoreActivity, id)
	return err
}

const updateActivity = `-- name: UpdateActivity :exec
UPDATE active_activities
SET
    title = $1,
    start_date = $2,
    end_date = $3,
    venue_id = $4,
    host_id = $5,
    metadata = $6,
    updated_at = NOW()
WHERE
    id = $7
`

type UpdateActivityParams struct {
	Title     string          `json:"title"`
	StartDate Date            `json:"start_date"`
	EndDate   Date            `json:"end_date"`
	VenueID   int32           `json:"venue_id"`
	HostID    int32           `json:"host_id"`
	Metadata  json.RawMessage `json:"metadata"`
	ID        int64           `json:"id"`
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) error {
	_, err := q.db.ExecContext(ctx, updateActivity,
		arg.Title,
		arg.StartDate,
		arg.EndDate,
		arg.VenueID,
		arg.HostID,
		arg.Metadata,
		arg.ID,
	)
	return err
}
