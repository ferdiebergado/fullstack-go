// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: venues.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const getVenues = `-- name: GetVenues :many
SELECT v.id, v.name, v.division_id, v.region_id, v.metadata, v.created_at, v.updated_at, v.deleted_at, r.name as region
FROM venues v
    JOIN regions r ON v.region_id = r.region_id
ORDER BY v.name
`

type GetVenuesRow struct {
	ID         int32           `json:"id"`
	Name       string          `json:"name"`
	DivisionID int32           `json:"division_id"`
	RegionID   int16           `json:"region_id"`
	Metadata   json.RawMessage `json:"metadata"`
	CreatedAt  time.Time       `json:"created_at"`
	UpdatedAt  time.Time       `json:"updated_at"`
	DeletedAt  sql.NullTime    `json:"deleted_at"`
	Region     string          `json:"region"`
}

func (q *Queries) GetVenues(ctx context.Context) ([]GetVenuesRow, error) {
	rows, err := q.db.QueryContext(ctx, getVenues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVenuesRow
	for rows.Next() {
		var i GetVenuesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DivisionID,
			&i.RegionID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Region,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
