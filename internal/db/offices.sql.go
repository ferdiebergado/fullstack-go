// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: offices.sql

package db

import (
	"context"
	"encoding/json"
)

const createOffice = `-- name: CreateOffice :one
INSERT INTO
    offices (name, metadata)
VALUES ($1, $2)
RETURNING
    id, name, short_name, metadata, created_at, updated_at, deleted_at
`

type CreateOfficeParams struct {
	Name     *string         `json:"name"`
	Metadata json.RawMessage `json:"metadata"`
}

func (q *Queries) CreateOffice(ctx context.Context, arg CreateOfficeParams) (Office, error) {
	row := q.db.QueryRowContext(ctx, createOffice, arg.Name, arg.Metadata)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortName,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteOffice = `-- name: DeleteOffice :exec
UPDATE offices SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteOffice(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOffice, id)
	return err
}

const findOffice = `-- name: FindOffice :one
SELECT id, name, short_name, metadata, created_at, updated_at, deleted_at FROM offices WHERE id = $1
`

func (q *Queries) FindOffice(ctx context.Context, id int32) (Office, error) {
	row := q.db.QueryRowContext(ctx, findOffice, id)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortName,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findOfficeByName = `-- name: FindOfficeByName :many
SELECT id, name, short_name, metadata, created_at, updated_at, deleted_at FROM offices WHERE name LIKE '%$1%'
`

func (q *Queries) FindOfficeByName(ctx context.Context) ([]Office, error) {
	rows, err := q.db.QueryContext(ctx, findOfficeByName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Office
	for rows.Next() {
		var i Office
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ShortName,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOffice = `-- name: ListOffice :many
SELECT id, name, short_name, metadata, created_at, updated_at, deleted_at FROM offices ORDER BY name
`

func (q *Queries) ListOffice(ctx context.Context) ([]Office, error) {
	rows, err := q.db.QueryContext(ctx, listOffice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Office
	for rows.Next() {
		var i Office
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ShortName,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreOffice = `-- name: RestoreOffice :exec
UPDATE offices SET deleted_at = NULL WHERE id = $1
`

func (q *Queries) RestoreOffice(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, restoreOffice, id)
	return err
}

const updateOffice = `-- name: UpdateOffice :exec
UPDATE offices
SET
    name = $1,
    metadata = $2,
    updated_at = NOW()
WHERE
    id = $3
`

type UpdateOfficeParams struct {
	Name     *string         `json:"name"`
	Metadata json.RawMessage `json:"metadata"`
	ID       int32           `json:"id"`
}

func (q *Queries) UpdateOffice(ctx context.Context, arg UpdateOfficeParams) error {
	_, err := q.db.ExecContext(ctx, updateOffice, arg.Name, arg.Metadata, arg.ID)
	return err
}
