// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: positions.sql

package db

import (
	"context"
	"encoding/json"
)

const createPosition = `-- name: CreatePosition :one
INSERT INTO
    positions (title, metadata)
VALUES ($1, $2)
RETURNING
    id, title, metadata, created_at, updated_at, is_deleted
`

type CreatePositionParams struct {
	Title    string          `json:"title"`
	Metadata json.RawMessage `json:"metadata"`
}

func (q *Queries) CreatePosition(ctx context.Context, arg CreatePositionParams) (Position, error) {
	row := q.db.QueryRowContext(ctx, createPosition, arg.Title, arg.Metadata)
	var i Position
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const deletePosition = `-- name: DeletePosition :exec
UPDATE positions SET is_deleted = 'Y' WHERE id = $1
`

func (q *Queries) DeletePosition(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePosition, id)
	return err
}

const findPosition = `-- name: FindPosition :one
SELECT id, title, metadata, created_at, updated_at, is_deleted FROM positions WHERE id = $1
`

func (q *Queries) FindPosition(ctx context.Context, id int32) (Position, error) {
	row := q.db.QueryRowContext(ctx, findPosition, id)
	var i Position
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const findPositionByTitle = `-- name: FindPositionByTitle :many
SELECT id, title, metadata, created_at, updated_at, is_deleted FROM positions WHERE title LIKE '%$1%'
`

func (q *Queries) FindPositionByTitle(ctx context.Context) ([]Position, error) {
	rows, err := q.db.QueryContext(ctx, findPositionByTitle)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Position
	for rows.Next() {
		var i Position
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPosition = `-- name: ListPosition :many
SELECT id, title, metadata, created_at, updated_at, is_deleted FROM positions ORDER BY title
`

func (q *Queries) ListPosition(ctx context.Context) ([]Position, error) {
	rows, err := q.db.QueryContext(ctx, listPosition)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Position
	for rows.Next() {
		var i Position
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePosition = `-- name: UpdatePosition :exec
UPDATE positions
SET
    title = $1,
    metadata = $2,
    updated_at = NOW()
WHERE
    id = $3
`

type UpdatePositionParams struct {
	Title    string          `json:"title"`
	Metadata json.RawMessage `json:"metadata"`
	ID       int32           `json:"id"`
}

func (q *Queries) UpdatePosition(ctx context.Context, arg UpdatePositionParams) error {
	_, err := q.db.ExecContext(ctx, updatePosition, arg.Title, arg.Metadata, arg.ID)
	return err
}
